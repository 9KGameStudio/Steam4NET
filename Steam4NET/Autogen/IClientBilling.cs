// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	public enum EPackageStatus : int
	{
	};
	
	[InterfaceVersion("CLIENTBILLING_INTERFACE_VERSION001")]
	public interface IClientBilling
	{
		[VTableSlot(0)]
		bool PurchaseWithActivationCode(string pchActivationCode);
		[VTableSlot(1)]
		bool CancelLicense(UInt32 packageID, Int32 nCancelReason);
		[VTableSlot(2)]
		UInt32 GetLicensePackageID(UInt32 nLicenseIndex);
		[VTableSlot(3)]
		UInt32 GetLicenseTimeCreated(UInt32 nLicenseIndex);
		[VTableSlot(4)]
		UInt32 GetLicenseTimeNextProcess(UInt32 nLicenseIndex);
		[VTableSlot(5)]
		Int32 GetLicenseMinuteLimit(UInt32 nLicenseIndex);
		[VTableSlot(6)]
		Int32 GetLicenseMinutesUsed(UInt32 nLicenseIndex);
		[VTableSlot(7)]
		EPaymentMethod GetLicensePaymentMethod(UInt32 nLicenseIndex);
		[VTableSlot(8)]
		ELicenseFlags GetLicenseFlags(UInt32 nLicenseIndex);
		[VTableSlot(9)]
		string GetLicensePurchaseCountryCode(UInt32 nLicenseIndex);
		[VTableSlot(10)]
		Int32 GetLicenseTerritoryCode(UInt32 nLicenseIndex);
		[VTableSlot(11)]
		bool GetLicenseInfo(UInt32 nLicenseIndex, ref UInt32 pRTime32Created, ref UInt32 pRTime32NextProcess, ref Int32 pnMinuteLimit, ref Int32 pnMinutesUsed, ref EPaymentMethod pePaymentMethod, ref UInt32 punFlags, ref Int32 pnTerritoryCode, StringBuilder prgchPurchaseCountryCode);
		[VTableSlot(12)]
		UInt32 GetReceiptPackageID(UInt32 nReceiptIndex);
		[VTableSlot(13)]
		EPurchaseStatus GetReceiptStatus(UInt32 nReceiptIndex);
		[VTableSlot(14)]
		EPurchaseResultDetail GetReceiptResultDetail(UInt32 nReceiptIndex);
		[VTableSlot(15)]
		UInt32 GetReceiptTransTime(UInt32 nReceiptIndex);
		[VTableSlot(16)]
		UInt64 GetReceiptTransID(UInt32 nReceiptIndex);
		[VTableSlot(17)]
		EPaymentMethod GetReceiptPaymentMethod(UInt32 nReceiptIndex);
		[VTableSlot(18)]
		UInt32 GetReceiptBaseCost(UInt32 nReceiptIndex);
		[VTableSlot(19)]
		UInt32 GetReceiptTotalDiscount(UInt32 nReceiptIndex);
		[VTableSlot(20)]
		UInt32 GetReceiptTax(UInt32 nReceiptIndex);
		[VTableSlot(21)]
		UInt32 GetReceiptShipping(UInt32 nReceiptIndex);
		[VTableSlot(22)]
		ECurrencyCode GetReceiptCurrencyCode(UInt32 nReceiptIndex);
		[VTableSlot(23)]
		string GetReceiptCountryCode(UInt32 nReceiptIndex);
		[VTableSlot(24)]
		string GetReceiptErrorHeadline(UInt32 nReceiptIndex);
		[VTableSlot(25)]
		string GetReceiptErrorString(UInt32 nReceiptIndex);
		[VTableSlot(26)]
		string GetReceiptErrorLinkText(UInt32 nReceiptIndex);
		[VTableSlot(27)]
		string GetReceiptErrorLinkURL(UInt32 nReceiptIndex);
		[VTableSlot(28)]
		UInt32 GetReceiptErrorAppID(UInt32 nReceiptIndex);
		[VTableSlot(29)]
		UInt32 GetNumLicenses();
		[VTableSlot(30)]
		UInt32 GetNumReceipts();
		[VTableSlot(31)]
		bool PurchaseWithMachineID(UInt32 nPackageID, string pchCustomData);
		[VTableSlot(32)]
		bool GetReceiptCardInfo(UInt32 nReceiptIndex, ref ECreditCardType eCreditCardType, StringBuilder pchCardLast4Digits, StringBuilder pchCardHolderFirstName, StringBuilder pchCardHolderLastName, StringBuilder pchCardExpYear, StringBuilder pchCardExpMonth);
		[VTableSlot(33)]
		bool GetReceiptBillingAddress(UInt32 nReceiptIndex, StringBuilder pchFirstName, StringBuilder pchLastName, StringBuilder pchAddress1, StringBuilder pchAddress2, StringBuilder pchCity, StringBuilder pchPostcode, StringBuilder pchState, StringBuilder pchCountry, StringBuilder pchPhone);
		[VTableSlot(34)]
		UInt32 GetReceiptLineItemCount(UInt32 nReceiptIndex);
		[VTableSlot(35)]
		bool GetReceiptLineItemInfo(UInt32 nReceiptIndex, UInt32 nLineItemIndex, ref UInt32 nPackageID, ref UInt32 nBaseCost, ref UInt32 nDiscount, ref UInt32 nTax, ref UInt32 nShipping, ref ECurrencyCode eCurrencyCode, ref UInt32 punAppId, StringBuilder pchDescription, StringBuilder pchCouponInfoURL);
		[VTableSlot(36)]
		void EnableTestLicense(UInt32 unPackageID);
		[VTableSlot(37)]
		void DisableTestLicense(UInt32 unPackageID);
		[VTableSlot(38)]
		bool ActivateOEMTicket(string pchOEMLicenseFile);
		[VTableSlot(39)]
		UInt32 GetPackageName(UInt32 unPackageID, StringBuilder pchName, Int32 cubName);
		[VTableSlot(40)]
		bool GetPackageInfo(UInt32 unPackageID, ref UInt32 puNumAppIds, ref UInt32 puNumDepotIDs, ref EBillingType peBillingType, ref ELicenseType peLicenseType, ref EPackageStatus pePackageStatus, ref Int32 piCodeClass, ref Int32 piGameCode, ref Int32 piTerritoryCode, ref bool pbRequiresShipping, ref bool pbIsPreorder);
		[VTableSlot(41)]
		UInt32 GetAppsInPackage(UInt32 unPackageID, ref UInt32 puIds, UInt32 uMaxIds, bool bExcludeDepots, bool bExcludeApps);
		[VTableSlot(42)]
		UInt32 GetPackageExtendedInfo(UInt32 unPackageID, Byte[] pubData, Int32 cubData, bool bSharedKVSymbols);
		[VTableSlot(43)]
		UInt64 RequestFreeLicenseForApp(UInt32 unAppId);
	};
}
